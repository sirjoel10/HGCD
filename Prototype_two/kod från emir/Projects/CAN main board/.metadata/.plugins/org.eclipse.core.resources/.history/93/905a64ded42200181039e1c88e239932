#include "CAN_BUS.h"
#include "main.h"
#include "stm32l4xx_hal.h"
#include "dataString.h"


void CANassembleDataPacket(uint16_t data1, uint16_t data2, uint16_t data3, uint16_t data4, uint8_t dataPackets, volatile uint8_t *dataBuffer)
{
	clearStringV(dataBuffer);
	uint8_t c1 = 0;
	uint8_t c2 = 0;
	uint8_t c3 = 0;
	uint8_t c4 = 0;
	uint8_t c5 = 0;
	uint8_t c6 = 0;
	uint8_t c7 = 0;
	uint8_t c8 = 0;

	c1 = data1 >> 8;
	c2 = data1 & LOW_BYTE_MASK;
	c3 = data2 >> 8;
	c4 = data2 & LOW_BYTE_MASK;
	c5 = data3 >> 8;
	c6 = data3 & LOW_BYTE_MASK;
	c7 = data4 >> 8;
	c8 = data4 & LOW_BYTE_MASK;


	switch(dataPackets)
	{
		case 1:
			dataBuffer[0] = c1;
			dataBuffer[1] = c2;
			break;

		case 2:
			dataBuffer[0] = c1;
			dataBuffer[1] = c2;
			dataBuffer[2] = c3;
			dataBuffer[3] = c4;
			break;

		case 3:
			dataBuffer[0] = c1;
			dataBuffer[1] = c2;
			dataBuffer[2] = c3;
			dataBuffer[3] = c4;
			dataBuffer[4] = c5;
			dataBuffer[5] = c6;
			break;

		case 4:
			dataBuffer[0] = c1;
			dataBuffer[1] = c2;
			dataBuffer[2] = c3;
			dataBuffer[3] = c4;
			dataBuffer[4] = c5;
			dataBuffer[5] = c6;
			dataBuffer[6] = c7;
			dataBuffer[7] = c8;
			break;

		default:
			break;
	}
	/*switch(dataPackets)
	{
		case 1:
			dataBuffer[0] = (data1 & HIGH_BYTE_MASK);
			dataBuffer[1] = (data1 & LOW_BYTE_MASK);
			break;

		case 2:
			dataBuffer[0] = (data1 & HIGH_BYTE_MASK);
			dataBuffer[1] = (data1 & LOW_BYTE_MASK);
			dataBuffer[2] = (data2 & HIGH_BYTE_MASK);
			dataBuffer[3] = (data2 & LOW_BYTE_MASK);
			break;

		case 3:
			dataBuffer[0] = (data1 & HIGH_BYTE_MASK);
			dataBuffer[1] = (data1 & LOW_BYTE_MASK);
			dataBuffer[2] = (data2 & HIGH_BYTE_MASK);
			dataBuffer[3] = (data2 & LOW_BYTE_MASK);
			dataBuffer[4] = (data3 & HIGH_BYTE_MASK);
			dataBuffer[5] = (data3 & LOW_BYTE_MASK);
			break;

		case 4:
			dataBuffer[0] = (data1 & HIGH_BYTE_MASK);
			dataBuffer[1] = (data1 & LOW_BYTE_MASK);
			dataBuffer[2] = (data2 & HIGH_BYTE_MASK);
			dataBuffer[3] = (data2 & LOW_BYTE_MASK);
			dataBuffer[4] = (data3 & HIGH_BYTE_MASK);
			dataBuffer[5] = (data3 & LOW_BYTE_MASK);
			dataBuffer[6] = (data4 & HIGH_BYTE_MASK);
			dataBuffer[7] = (data4 & LOW_BYTE_MASK);
			break;

		default:
			break;
	}*/
}

void CANinterpretDataPacket(uint16_t data1, uint16_t data2, uint16_t data3, uint16_t data4, uint8_t dataPackets, volatile uint8_t *dataBuffer)
{
	switch(dataPackets)
	{
		case 1:

			data1 = dataBuffer[0];
			data1 = data1 << 8;
			data1 = data1 | dataBuffer[1];
			data2 = 0;
			data3 = 0;
			data4 = 0;
			break;

		case 2:
			data1 = dataBuffer[0];
			data1 = data1 << 8;
			data1 = data1 | dataBuffer[1];

			data2 = dataBuffer[2];
			data2 = data2 << 8;
			data2 = data2 | dataBuffer[3];

			data3 = 0;
			data4 = 0;
			break;

		case 3:
			data1 = dataBuffer[0];
			data1 = data1 << 8;
			data1 = data1 | dataBuffer[1];

			data2 = dataBuffer[2];
			data2 = data2 << 8;
			data2 = data2 | dataBuffer[3];

			data3 = dataBuffer[4];
			data3 = data3 << 8;
			data3 = data3 | dataBuffer[5];

			data4 = 0;
			break;

		case 4:
			data1 = dataBuffer[0];
			data1 = data1 << 8;
			data1 = data1 | dataBuffer[1];

			data2 = dataBuffer[2];
			data2 = data2 << 8;
			data2 = data2 | dataBuffer[3];

			data3 = dataBuffer[4];
			data3 = data3 << 8;
			data3 = data3 | dataBuffer[5];

			data3 = dataBuffer[6];
			data3 = data4 << 8;
			data3 = data4 | dataBuffer[7];
			break;

		default:
			break;
	}
}
