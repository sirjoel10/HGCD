#include "dataString.h"
#include "stdbool.h"


//Local function prototypes
uint8_t compareSt(uint8_t *pBuff1, const uint8_t *pBuff2);

//global functions

void clearString(uint8_t *pBuff)
{
	static int i;
	for(i = 0; i < MAX_STRING_LENGHT ; i++)
	{
		if(pBuff[i] == '\0')
		{
			i = 0;
			break;
		}
		else
		{
			pBuff[i] = 0;
		}
	}
	/*while(*pBuff != '\0')
	{
		*pBuff++ = 0;
	}*/
}

void copyString(uint8_t *pBuffO, uint8_t *pBuffC)
{
	static int i;
	for(i = 0; ; i++)
	{
		if(pBuffO[i] == '\0')
		{
			i = 0;
			break;
		}
		else
		{
			pBuffC[i] = pBuffO[i];
		}
	}
	/*while(*pBuffO != '\0')
	{
		*pBuffC++ = *pBuffO++;
	}*/
}

void copyString2(const uint8_t *pBuffO, uint8_t *pBuffC)
{
	static int i;
		for(i = 0; ; i++)
		{
			if(pBuffO[i] == '\0')
			{
				i = 0;
				break;
			}
			else
			{
				pBuffC[i] = pBuffO[i];
			}
		}
	/*while(*pBuffO != '\0')
	{
		*pBuffC++ = *pBuffO++;
	}*/
}

void copyStringV(volatile uint8_t *pBuffO, volatile uint8_t *pBuffC)
{
	static int i;
	for(i = 0; ; i++)
	{
		if(pBuffO[i] == '\0')
		{
			i = 0;
			break;
		}
		else
		{
			pBuffC[i] = pBuffO[i];
		}
	}
	/*while(*pBuffO != '\0')
	{
		*pBuffC++ = *pBuffO++;
	}*/
}
bool compareString(uint8_t *pBuff1, const uint8_t *pBuff2)
{
    if(compareSt(pBuff1,pBuff2) == 0)
    {
        return true;
    }
    else
    {
        return false;
    }
}

uint8_t compareSt(uint8_t *pBuff1, const uint8_t *pBuff2)
{
    static uint16_t i = 0;
    for (i = 0 ; pBuff1[i] == pBuff2[i]; i++)
	if /*(*/(pBuff1[i] == '\n')/*||(pBuff1[i] == '\0'))*/
	    return 0;
    return ((*(unsigned char *)pBuff1 < *(unsigned char *)pBuff2) ? -1 : +1);
}
