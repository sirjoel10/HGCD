/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  ** This notice applies to any and all portions of this file
  * that are not between comment pairs USER CODE BEGIN and
  * USER CODE END. Other portions of this file, whether 
  * inserted by the user or by software development tools
  * are owned by their respective copyright owners.
  *
  * COPYRIGHT(c) 2018 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32l4xx_hal.h"



/* USER CODE BEGIN Includes */

#include "dataString.h"
#include "CAN_BUS.h"
#include "string.h"
//#define TRANSMIT
#define RECEIVE


/* USER CODE END Includes */

/* Private variables ---------------------------------------------------------*/
//CAN_HandleTypeDef hcan1;

uint8_t ubKeyNumber = 0x0;
CAN_HandleTypeDef     CanHandle;
CAN_TxHeaderTypeDef   TxHeader;
CAN_RxHeaderTypeDef   RxHeader;
volatile uint8_t               TxData[8];
volatile uint8_t               RxData[8];
volatile uint32_t              TxMailbox;





/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
//static void MX_CAN1_Init(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
static void CAN_Config(void);
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
/*
 *
CAN1->sTxMailBox[0].TIR = 0;				//this is the CAN1 Tx mailbox identifier register  from bit0 (TXRQ) (CAN_TDTxR)(x=0..2) there are 3 in total
											//this is set by software to request the transmission for the corresponding mail box
											//cleared by hardware when the mailbox is empty

CAN1->sTxMailBox[0].TIR = 0x245 << 21;		//we then write 0x245 to the STID (standard ID ) register located on bit 21-31 (hence shift of 21 places)
CAN1->sTxMailBox[0].TDHR = 0;				//data high mailbox register CAN_THDxR, we will transmit only one byte so it will be 0
CAN1->sTxMailBox[0].TDTR = 1;				//mailbox data lenght register CAN_TDTxR(x=0..2)
											//the DLC register defines the number of data bytes in a data frame, therefore it contains one byte

//CAN filter master config

CAN1->FMR|= 1 << 0;						    //this is the CAN_FMR register the (FINIT initializes the filter mode)
											//we set the bit 0 here for (initialization mode of filters mode) CAN_FMR.FINIT = 1;
CAN1->FMR |= 14 << 8;  						//we then select how many filters we reserve for CAN1/CAN2 (this is not applicable in out board)
CAN1->FS1R |= 1 << 14; 						//this is the CAN filter scale register (CAN_FS1R), the (FSCx) is the filter scale either dual 16 bit config or single 32-bit config
											//we selected 32 bit config by writing to the 14th bit
CAN1 ->sFilterRegister[14].FR1 = 0x245 << 21; 	//this is the filter bank i register x(CAN_FiR) (i = 0..27)(x = 1,2), in this case we are occupying the bits after 21
											//FB is the filter bits 0: means dominant bit is expected, 1 means ressessive bit is expected

CAN1->FM1R|= 1 << 14;						//in the filter mode register we will select the identifier list mode so: FBM14 = 1
CAN1->FA1R|= 1 << 14;						//in the filter activation register (CAN_FA1R) (FACTx) and we set the filter FACTx = 1; for filter 14
											//this will activate filter 14
CAN1->FMR &=(1 << 0);     					//leave the initialization by clearing the bit 0 in the FILTER MASTER REGISTER (FMR)


*/

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	extern CAN1_DATA canData;							//declare a structure variable
	//volatile uint8_t dataQuantity;				//volatile declaration for protection against optimization
	memset(&canData, 0, sizeof(CAN1_DATA));		//initialize all members of this variable to 0
	CAN1_DATA *canPtr = &canData;				//dereference a pointer to stucture

	canPtr->Value1 = 401u;						//use pointer to access variables
	canPtr->Value2 = 402u;
	canPtr->Value3 = 403u;
	canPtr->Value4 = 404u;

	canPtr-> dataQuantity = 4u;


	CANassembleDataPacket(canPtr->Value1, canPtr->Value2, canPtr->Value3, canPtr->Value4, canPtr-> dataQuantity , TxData);

	copyStringV(TxData,RxData);

	CANinterpretDataPacket(canPtr->Value5, canPtr->Voltage6, canPtr->Voltage7, canPtr->Voltage8, canPtr->dataQuantity , RxData);


	canPtr->Voltage9 = 404;

  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  //MX_CAN1_Init();
  /* USER CODE BEGIN 2 */

  CAN_Config();

  HAL_CAN_MspInit(&CanHandle);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
#ifdef TRANSMIT
	  TxData[0] = 0xF0;
	  TxData[1] = 0xF0;
	  if (HAL_CAN_AddTxMessage(&CanHandle, &TxHeader, TxData, &TxMailbox) != HAL_OK)
	  {
		/* Transmission request Error */
		//Error_Handler();
		  __NOP();
		  __NOP();
	  }
	  HAL_Delay(100);
#endif

  }
  /* USER CODE END 3 */

}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 10;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* CAN1 init function */
/*static void MX_CAN1_Init(void)
{

  hcan1.Instance = CAN1;
  hcan1.Init.Prescaler = 16;
  hcan1.Init.Mode = CAN_MODE_NORMAL;
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
  //hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
  //hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
  hcan1.Init.TimeTriggeredMode = DISABLE;
  hcan1.Init.AutoBusOff = DISABLE;
  hcan1.Init.AutoWakeUp = DISABLE;
  hcan1.Init.AutoRetransmission = DISABLE;
  hcan1.Init.ReceiveFifoLocked = DISABLE;
  hcan1.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}*/

/** Configure pins as 
        * Analog 
        * Input 
        * Output
        * EVENT_OUT
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
static void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}

/* USER CODE BEGIN 4 */
static void CAN_Config(void)
{
	  CAN_FilterTypeDef  sFilterConfig;

	  /*##-1- Configure the CAN peripheral #######################################*/
	  CanHandle.Instance = CAN1;

	  CanHandle.Init.TimeTriggeredMode = DISABLE;
	  CanHandle.Init.AutoBusOff = DISABLE;
	  CanHandle.Init.AutoWakeUp = DISABLE;
	  CanHandle.Init.AutoRetransmission = ENABLE;
	  CanHandle.Init.ReceiveFifoLocked = DISABLE;
	  CanHandle.Init.TransmitFifoPriority = DISABLE;
	  CanHandle.Init.Mode = CAN_MODE_NORMAL;
	  CanHandle.Init.SyncJumpWidth = CAN_SJW_1TQ;
	  CanHandle.Init.TimeSeg1 = CAN_BS1_4TQ;
	  CanHandle.Init.TimeSeg2 = CAN_BS2_5TQ;
	  CanHandle.Init.Prescaler = 8;

	  if (HAL_CAN_Init(&CanHandle) != HAL_OK)
	  {
	    /* Initialization Error */
	    Error_Handler();
	  }

	  /*##-2- Configure the CAN Filter ###########################################*/
	  sFilterConfig.FilterBank = 0;
	  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
	  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
#ifdef TRANSMIT
	  sFilterConfig.FilterIdHigh = 0x321;
#endif
#ifdef RECEIVE
	  sFilterConfig.FilterIdHigh = 0x0000;
#endif
	  sFilterConfig.FilterIdLow = 0x0000;
	  sFilterConfig.FilterMaskIdHigh = 0x0000;
	  sFilterConfig.FilterMaskIdLow = 0x0000;
	  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
	  sFilterConfig.FilterActivation = ENABLE;
	  sFilterConfig.SlaveStartFilterBank = 14;



	  if (HAL_CAN_ConfigFilter(&CanHandle, &sFilterConfig) != HAL_OK)
	  {
	    /* Filter configuration Error */
	    Error_Handler();
	  }

	  /*##-3- Start the CAN peripheral ###########################################*/
	  if (HAL_CAN_Start(&CanHandle) != HAL_OK)
	  {
	    /* Start Error */
	    Error_Handler();
	  }

	  /*##-4- Activate CAN RX notification #######################################*/
	  if (HAL_CAN_ActivateNotification(&CanHandle, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
	  {
	    /* Notification Error */
	    Error_Handler();
	  }

	  /*##-5- Configure Transmission process #####################################*/
#ifdef TRANSMIT
	  TxHeader.StdId = 0x0000;
#endif
#ifdef RECEIVE
	  TxHeader.StdId = 0x321;
#endif
	  TxHeader.ExtId = 0x01;
	  TxHeader.RTR = CAN_RTR_DATA;
	  TxHeader.IDE = CAN_ID_STD;
	  TxHeader.DLC = 2;
	  TxHeader.TransmitGlobalTime = DISABLE;
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/**
  * @}
  */

/**
  * @}
  */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
